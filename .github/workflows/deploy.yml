name: Deploy SoomSoom Backend Application

on:
    push:
        branches: [ "main", "release/**" ]
        paths-ignore:
            - 'terraform/**'
            - 'README.md'

env:
    # 환경에 따라 다른 버킷 이름을 사용하도록 변수 추가
    PROD_S3_BUCKET_NAME: soomsoom-prod-bucket
    TEST_S3_BUCKET_NAME: soomsoom-test-bucket
    ECR_REPOSITORY: soomsoom-backend
    AWS_REGION: ap-northeast-2

permissions:
    id-token: write
    contents: read

jobs:
    # 1. Build Job: 어떤 환경이든 동일한 Docker 이미지를 딱 한 번만 빌드합니다.
    build:
        runs-on: ubuntu-latest
        outputs:
            image_tag: ${{ steps.build-image.outputs.image_tag }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: '17'
                  distribution: 'temurin'

            - name: Grant execute permission for gradlew
              run: chmod +x ./gradlew

            - name: Build with Gradle
              run: ./gradlew build -x test

            - name: Configure AWS credentials using OIDC
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/soomsoom-github-actions-role
                  aws-region: ap-northeast-2

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    # 2. Deploy Job: 빌드된 이미지를 특정 환경에 배포합니다.
    deploy:
        needs: build # build job이 성공해야 실행됩니다.
        runs-on: ubuntu-latest

        environment:
            name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Configure AWS credentials using OIDC
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/soomsoom-github-actions-role
                  aws-region: ${{ env.AWS_REGION }}

            - name: Set deployment variables based on branch
              id: set-vars
              run: |
                  if [ "${{ github.ref }}" = "refs/heads/main" ]; then
                    echo "app_name=soomsoom-backend-prod" >> $GITHUB_OUTPUT
                    echo "group_name=soomsoom-prod-deploy-group" >> $GITHUB_OUTPUT
                    echo "bucket_name=${{ env.PROD_S3_BUCKET_NAME }}" >> $GITHUB_OUTPUT
                  else
                    echo "app_name=soomsoom-backend-test" >> $GITHUB_OUTPUT
                    echo "group_name=soomsoom-test-deploy-group" >> $GITHUB_OUTPUT
                    echo "bucket_name=${{ env.TEST_S3_BUCKET_NAME }}" >> $GITHUB_OUTPUT
                  fi

            - name: Zip and upload to S3 for CodeDeploy
              run: |
                  echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" > env.vars
                  zip -r deploy.zip appspec.yml scripts/ env.vars
                  aws s3 cp deploy.zip s3://${{ steps.set-vars.outputs.bucket_name }}/soomsoom-backend/${{ needs.build.outputs.image_tag }}.zip

            - name: Create CodeDeploy Deployment
              run: |
                  aws deploy create-deployment \
                    --application-name ${{ steps.set-vars.outputs.app_name }} \
                    --deployment-group-name ${{ steps.set-vars.outputs.group_name }} \
                    --s3-location bucket=${{ steps.set-vars.outputs.bucket_name }},key=soomsoom-backend/${{ needs.build.outputs.image_tag }}.zip,bundleType=zip
