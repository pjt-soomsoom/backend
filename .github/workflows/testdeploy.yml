# .github/workflows/deploy.yml
name: CI/CD for SoomSoom Backend

on:
  push:
    branches: [ "main" ]

# 워크플로우에서 공통으로 사용할 변수 설정
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: sumsum-bucket
  CODE_DEPLOY_APP_NAME: soomsoom-backend
  CODE_DEPLOY_GROUP_NAME: test-deploy-group
  ECR_REPOSITORY: soomsoom-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application.properties 파일 동적 생성
      # GitHub Secrets에 저장된 값들을 빌드에 포함될 설정 파일로 만듭니다.
      - name: Make application.properties
        run: |
          mkdir -p ./src/main/resources
          echo "spring.config.import=optional:file:.env[.properties]" > ./src/main/resources/application.properties
          echo "spring.messages.basename=messages/messages-error" >> ./src/main/resources/application.properties
          echo "spring.messages.encoding=UTF-8" >> ./src/main/resources/application.properties

          # Datasource
          echo "spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }}" >> ./src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> ./src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> ./src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" >> ./src/main/resources/application.properties

          # JPA
          echo "spring.jpa.hibernate.ddl-auto=${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}" >> ./src/main/resources/application.properties
          echo "spring.jpa.show-sql=${{ secrets.SPRING_JPA_SHOW_SQL }}" >> ./src/main/resources/application.properties
          echo "spring.jpa.properties.hibernate.format_sql=${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL }}" >> ./src/main/resources/application.properties

          # JWT
          echo "jwt.secret=${{ secrets.JWT_SECRET }}" >> ./src/main/resources/application.properties
          echo "jwt.access.expiration=${{ secrets.JWT_ACCESS_EXPIRATION }}" >> ./src/main/resources/application.properties
          echo "jwt.refresh.expiration=${{ secrets.JWT_REFRESH_EXPIRATION }}" >> ./src/main/resources/application.properties

          # AWS
          echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY }}" >> ./src/main/resources/application.properties
          echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_KEY }}" >> ./src/main/resources/application.properties
          echo "cloud.aws.region.static=${{ env.AWS_REGION }}" >> ./src/main/resources/application.properties
          echo "cloud.aws.s3.bucket=${{ secrets.AWS_S3_BUCKET }}" >> ./src/main/resources/application.properties
          echo "cloud.aws.s3.base-url=${{ secrets.BASE_URL }}" >> ./src/main/resources/application.properties

          # OAuth
          echo "oauth.google.client-id=${{ secrets.OAUTH_GOOGLE_CLIENT_ID }}" >> ./src/main/resources/application.properties
          echo "oauth.apple.client-id=${{ secrets.OAUTH_APPLE_CLIENT_ID }}" >> ./src/main/resources/application.properties

          # Cutoff Time
            echo "app.daily-cutoff-hour=${{ secrets.APP_DAILY_CUTOFF_HOUR }}" >> ./src/main/resources/application.properties
      # 4. Gradle 빌드 권한 부여 및 실행
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6. AWS ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7. Docker 이미지 빌드 및 ECR에 푸시
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 8. 배포 패키지 생성 및 S3 업로드
      - name: Zip and upload to S3 for CodeDeploy
        run: |
            # EC2의 start.sh 스크립트가 사용할 환경 변수 파일 생성
            echo "AWS_REGION=${{ env.AWS_REGION }}" > env.vars
            echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> env.vars
            echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}" >> env.vars
            echo "IMAGE_TAG=${{ github.sha }}" >> env.vars

            # appspec.yml, scripts 폴더, 그리고 방금 만든 env.vars 파일을 함께 압축
            zip -r deploy.zip appspec.yml scripts/ env.vars

            aws s3 cp deploy.zip s3://$S3_BUCKET_NAME/soomsoom-backend/${{ github.sha }}.zip
      # 9. AWS CodeDeploy 배포 생성
      - name: Create CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name $CODE_DEPLOY_APP_NAME \
            --deployment-group-name $CODE_DEPLOY_GROUP_NAME \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --s3-location bucket=$S3_BUCKET_NAME,key=soomsoom-backend/${{ github.sha }}.zip,bundleType=zip
